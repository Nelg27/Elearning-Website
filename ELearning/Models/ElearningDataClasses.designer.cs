#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ELearning.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ElearningDatabase")]
	public partial class ElearningDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertcour(cour instance);
    partial void Updatecour(cour instance);
    partial void Deletecour(cour instance);
    partial void Insertinscription(inscription instance);
    partial void Updateinscription(inscription instance);
    partial void Deleteinscription(inscription instance);
    #endregion
		
		public ElearningDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ElearningDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ElearningDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElearningDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElearningDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElearningDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<cour> cours
		{
			get
			{
				return this.GetTable<cour>();
			}
		}
		
		public System.Data.Linq.Table<inscription> inscriptions
		{
			get
			{
				return this.GetTable<inscription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _nom;
		
		private string _prenom;
		
		private System.Nullable<int> _level;
		
		private string _password;
		
		private System.Nullable<int> _actif;
		
		private string _mail;
		
		private string _typeuser;
		
		private EntitySet<inscription> _inscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnprenomChanging(string value);
    partial void OnprenomChanged();
    partial void OnlevelChanging(System.Nullable<int> value);
    partial void OnlevelChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnactifChanging(System.Nullable<int> value);
    partial void OnactifChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    partial void OntypeuserChanging(string value);
    partial void OntypeuserChanged();
    #endregion
		
		public user()
		{
			this._inscriptions = new EntitySet<inscription>(new Action<inscription>(this.attach_inscriptions), new Action<inscription>(this.detach_inscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="NChar(30)")]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom", DbType="NChar(30)")]
		public string prenom
		{
			get
			{
				return this._prenom;
			}
			set
			{
				if ((this._prenom != value))
				{
					this.OnprenomChanging(value);
					this.SendPropertyChanging();
					this._prenom = value;
					this.SendPropertyChanged("prenom");
					this.OnprenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int")]
		public System.Nullable<int> level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actif", DbType="Int")]
		public System.Nullable<int> actif
		{
			get
			{
				return this._actif;
			}
			set
			{
				if ((this._actif != value))
				{
					this.OnactifChanging(value);
					this.SendPropertyChanging();
					this._actif = value;
					this.SendPropertyChanged("actif");
					this.OnactifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="VarChar(50)")]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeuser", DbType="VarChar(100)")]
		public string typeuser
		{
			get
			{
				return this._typeuser;
			}
			set
			{
				if ((this._typeuser != value))
				{
					this.OntypeuserChanging(value);
					this.SendPropertyChanging();
					this._typeuser = value;
					this.SendPropertyChanged("typeuser");
					this.OntypeuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_inscription", Storage="_inscriptions", ThisKey="Id", OtherKey="user")]
		public EntitySet<inscription> inscriptions
		{
			get
			{
				return this._inscriptions;
			}
			set
			{
				this._inscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_inscriptions(inscription entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_inscriptions(inscription entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cours")]
	public partial class cour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _titre;
		
		private string _description;
		
		private string _author;
		
		private string _video;
		
		private string _intro;
		
		private System.Nullable<int> _views;
		
		private string _image;
		
		private string _level;

		public int status;

		private EntitySet<inscription> _inscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntitreChanging(string value);
    partial void OntitreChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void OnvideoChanging(string value);
    partial void OnvideoChanged();
    partial void OnintroChanging(string value);
    partial void OnintroChanged();
    partial void OnviewsChanging(System.Nullable<int> value);
    partial void OnviewsChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnlevelChanging(string value);
    partial void OnlevelChanged();
    #endregion
		
		public cour()
		{
			this._inscriptions = new EntitySet<inscription>(new Action<inscription>(this.attach_inscriptions), new Action<inscription>(this.detach_inscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_titre", DbType="VarChar(400)")]
		public string titre
		{
			get
			{
				return this._titre;
			}
			set
			{
				if ((this._titre != value))
				{
					this.OntitreChanging(value);
					this.SendPropertyChanging();
					this._titre = value;
					this.SendPropertyChanged("titre");
					this.OntitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="VarChar(50)")]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_video", DbType="VarChar(400)")]
		public string video
		{
			get
			{
				return this._video;
			}
			set
			{
				if ((this._video != value))
				{
					this.OnvideoChanging(value);
					this.SendPropertyChanging();
					this._video = value;
					this.SendPropertyChanged("video");
					this.OnvideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intro", DbType="VarChar(155)")]
		public string intro
		{
			get
			{
				return this._intro;
			}
			set
			{
				if ((this._intro != value))
				{
					this.OnintroChanging(value);
					this.SendPropertyChanging();
					this._intro = value;
					this.SendPropertyChanged("intro");
					this.OnintroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_views", DbType="Int")]
		public System.Nullable<int> views
		{
			get
			{
				return this._views;
			}
			set
			{
				if ((this._views != value))
				{
					this.OnviewsChanging(value);
					this.SendPropertyChanging();
					this._views = value;
					this.SendPropertyChanged("views");
					this.OnviewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(400)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="NChar(10)")]
		public string level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cour_inscription", Storage="_inscriptions", ThisKey="Id", OtherKey="cours")]
		public EntitySet<inscription> inscriptions
		{
			get
			{
				return this._inscriptions;
			}
			set
			{
				this._inscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_inscriptions(inscription entity)
		{
			this.SendPropertyChanging();
			entity.cour = this;
		}
		
		private void detach_inscriptions(inscription entity)
		{
			this.SendPropertyChanging();
			entity.cour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.inscription")]
	public partial class inscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cours;
		
		private string _user;
		
		private EntityRef<cour> _cour;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncoursChanging(int value);
    partial void OncoursChanged();
    partial void OnuserChanging(string value);
    partial void OnuserChanged();
    #endregion
		
		public inscription()
		{
			this._cour = default(EntityRef<cour>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cours", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int cours
		{
			get
			{
				return this._cours;
			}
			set
			{
				if ((this._cours != value))
				{
					if (this._cour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoursChanging(value);
					this.SendPropertyChanging();
					this._cours = value;
					this.SendPropertyChanged("cours");
					this.OncoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cour_inscription", Storage="_cour", ThisKey="cours", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public cour cour
		{
			get
			{
				return this._cour.Entity;
			}
			set
			{
				cour previousValue = this._cour.Entity;
				if (((previousValue != value) 
							|| (this._cour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cour.Entity = null;
						previousValue.inscriptions.Remove(this);
					}
					this._cour.Entity = value;
					if ((value != null))
					{
						value.inscriptions.Add(this);
						this._cours = value.Id;
					}
					else
					{
						this._cours = default(int);
					}
					this.SendPropertyChanged("cour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_inscription", Storage="_user1", ThisKey="user", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.inscriptions.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.inscriptions.Add(this);
						this._user = value.Id;
					}
					else
					{
						this._user = default(string);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
